name: Terragrunt Unit Tests

on:
  workflow_dispatch:

env:
  tf_version: 'latest'          # Terraform version
  tg_version: '0.68.5'         # Terragrunt version
  tg_dir: 'TgLab/environments/unit/azresgroup' # Path to your Terragrunt directory

jobs:
  terragrunt-tests:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      # Install Terragrunt
      - name: Install Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.tg_version }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      # Azure login using Service Principal Secret
      - name: Azure Login with Service Principal
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Run Terragrunt formatting check
      - name: Check Terragrunt HCL formatting
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

      # Plan execution
      - name: Terragrunt Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'plan'

      # Apply execution
      - name: Terragrunt Apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'apply'
          tg_add_approve: '1' # Automatically adds -auto-approve to apply command

      # Verify resources in Azure
      - name: Verify Azure Resource Group Exists
        run: |
          az group show --name resource-group-unit

      # Destroy resources after testing
      - name: Terragrunt Destroy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.tg_dir }}
          tg_command: 'destroy'
          tg_add_approve: '1' # Automatically adds -auto-approve to destroy command
