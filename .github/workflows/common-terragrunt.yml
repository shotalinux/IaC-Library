name: Common Terragrunt Unit Tests

on:
  workflow_call:
    inputs:
      tf_version:
        type: string
        required: false
        default: 'latest'
      tg_version:
        type: string
        required: false
        default: '0.68.5'
      tg_dir:
        type: string
        required: true

jobs:
  terragrunt-tests:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}

      # Install Terragrunt
      - name: Install Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.tg_version }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      # Run Terragrunt formatting check
      - name: Check Terragrunt HCL formatting
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

      # Plan execution
      - name: Terragrunt Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'plan'

      # Apply execution
      - name: Terragrunt Apply
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'apply'
          tg_add_approve: '1'

      # Destroy resources after testing
      - name: Terragrunt Destroy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ inputs.tf_version }}
          tg_version: ${{ inputs.tg_version }}
          tg_dir: ${{ inputs.tg_dir }}
          tg_command: 'destroy'
          tg_add_approve: '1'
